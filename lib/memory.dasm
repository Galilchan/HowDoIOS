; *************************
; Project: S0lllOS
; File: memory.dasm
; *************************

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; _mem_alloc_memory ("MALLOC")
;; Arguments: A - size
;;			  B - pid
;; Returns:   A - pointer to memory / 0 on failure
:_mem_alloc_memory
	SET PUSH, I
	SET PUSH, B ; pid
	
	SET B, 0
:.sizel
	IFG [_mem_buddy_sizes+B], A
		SET PC, .sized
	ADD B, 1
	SET PC,.sizel
:.sized
	SET C, B ; B does now contain the buddy size (2^B > A)

:.findfreel
	IFE [_mem_core_buddies+C], 0
		SET PC, .inc_size
	SET I, [_mem_core_buddies+C]
:.inner_freel
	IFE [I], 0 ; found a free one
		SET PC, .inner_freed
	IFE [I+2], 0 ; end of this list
		SET PC, .inc_size
	SET I, [I+2]
	SET PC, .inner_freel
:.inc_size
	ADD C, 1
	IFN C, [_mem_arena_info+4]
		SET PC, .findfreel
	SET A, POP ; no free memory
	SET A, 0
	SET PC, .return
	
:.inner_freed ; C - buddy size index, I - buddy descriptor addr
	IFE C, B ; buddy is ready
		SET PC, .alloc_ret
	JSR .split ; splits buddy I, I = buddy #1 descriptor, decrements C
	SET PC, .inner_freed
	
:.alloc_ret
	SET [I], POP ; pid
	SET A, [I+1] ; I+1 - buddy loc
:.return
	SET I, POP
	SET PC, POP
	
:.split
	SET PUSH, X
	SET PUSH, Y
	SET Y, _mem_core_buddies
	ADD Y, C
	SET X, Y
	SUB X, 2
	IFE [Y], I
		SET PC, .split_find_prevd
	SET Y, [Y]
:.split_find_prevl
	IFE Y, I
		SET PC, .split_find_prevd
	SET X, Y
	SET Y, [Y+2] ; next in chain
	SET PC, .split_find_prevl
:.split_find_prevd
	SUB C, 1
	SET [X+2], [I+2] ; break out split buddy (X - prev descriptor)
	SET Y, [_mem_arena_info+2] ; last buddy desc
	SET [Y], 0
	SET [Y+1], [I+1]
	ADD [Y+1], [_mem_buddy_sizes+C]
	SET [Y+2], 0
	SET [I], 0	 ; make new block free, location is still correct
	SET [I+2], Y ; set successor
	ADD [_mem_arena_info+2], 3
	SET Y, _mem_core_buddies
	ADD Y, C
	IFN [Y], 0
		SET PC, .split_findl
	SUB Y, 2
	SET PC, .split_done
:.split_findl
	IFE [Y+2], 0
		SET PC, .split_done
	SET Y, [Y+2]
	SET PC, .split_findl
:.split_done
	SET [Y+2], I ; add desc #1 and #2 to the list
	SET X, POP
	SET Y, POP
	SET PC, POP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; _mem_free_memory ("FREE")
;; Arguments: A - pointer to memory
;; Returns:   A - 0 on failure
:_mem_free_memory
	JSR _mem_find_buddy
	SET [A], 0 ; pid = 0 / free!
	SET C, [A+1]
	MOD C, [_mem_buddy_sizes+1+B] ; mod next biggest buddy size
	
	SET A, [A+1]
	IFE C, 0
		SET PC, .even
	SUB A, C ; "uneven cut" -> buddy is at [A+1] - C
	SET PC, .check_merge
:.even
	ADD A, [_mem_buddy_sizes+B] ; "even cut" -> buddy is the following one ([A+1]+[budsize+B])
:.check_merge
	JSR _mem_find_buddy
	IFN [A], 0 ; buddy is taken, we can exit
		SET PC, POP
		
	; merge
	; go a level up
	SET PC, POP

; pid; location; next; ??

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; _mem_find_buddy
;; Arguments: A - pointer to memory
;; Returns:   A - pointer to buddy info / 0 on failure
;;            B - buddy size offset
:_mem_find_buddy
	SET B, 0xffff
:.findl
	ADD B, 1
	IFE B, [_mem_arena_info+4] ; no more blocks to check
		SET PC, .error
	IFE [_mem_core_buddies+B], 0
		SET PC, .findl
	SET C, [_mem_core_buddies+B]
:.find_innerl
	IFE [C+1], A ; found
		SET PC, .end
	IFE [C+2], 0 ; no more of this size
		SET PC, .findl
	SET C, [C+2]
	SET PC, .find_innerl
:.end
	SET A, C
	SET PC, POP
	
:.error
	SET A, 0
	SET PC, POP

:_mem_buddy_sizes
	dat 0x4
	dat 0x8
	dat 0x10
	dat 0x20
	dat 0x40
	dat 0x80
	dat 0x100
	dat 0x200
	dat 0x400
	dat 0x800
	dat 0x1000
	dat 0x2000

; dat "CORE BUDDIES"
:_mem_core_buddies	dat 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _mem_kernel_memory
	
; dat "ARENA INFO"
:_mem_arena_info
	dat _mem_arena, 0x2000
	dat _mem_kernel_memory+3, 0x7fd
	dat 13

; dat "KERNEL MEM"
:_mem_kernel_memory
	dat 0, _mem_arena, 0 ; 2^13 buddy, unallocated
.reserve 0x1000
; 0x0	 - 0x9	  (0x10 / 2^4) --
; 0x10	 - 0x19	  (0x10 / 2^4)  | 0x40 words
; 0x20	 - 0x39	  (0x20 / 2^5) --
; 0x40	 - 0x79	  (0x40 / 2^6)
; 0x80	 - 0xff	  (0x80 / 2^7)
; 0x100	 - 0x1ff  (0x100 / 2^8)
; 0x200	 - 0x3ff  (0x200 / 2^9)
; 0x400	 - 0x7ff  (0x400 / 2^10)
; 0x800	 - 0xfff  (0x800 / 2^11)
; 0x1000 - 0x1fff (0x1000 / 2^12)

; dat "ARENA"
:_mem_arena
.reserve 0x2000

;      ----
;	dat 1, _mem_arena, _2, 0		; 2^4    |
;:_2	dat 1, _mem_arena + 0x10, 0, 0	; 2^4    |
;	dat 1, _mem_arena + 0x20, 0, 0	; 2^5    |
;	dat 0, _mem_arena + 0x40, 0, 0	; 2^6    |
;	dat 0, _mem_arena + 0x80, 0, 0	; 2^7    |
;	dat 0, _mem_arena + 0x100, 0, 0	; 2^8    |
;	dat 0, _mem_arena + 0x200, 0, 0	; 2^9    |
;	dat 0, _mem_arena + 0x400, 0, 0	; 2^10   |
;	dat 0, _mem_arena + 0x800, 0, 0	; 2^11   |
;	dat 0, _mem_arena + 0x1000, 0, 0; 2^12 ---- 0x40 words