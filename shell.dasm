; *************************
; Project: S0lllOS
; Author:  S0lll0s
; File:    shell.dasm
; *************************

SET PC, _shell

:_codecave
	.reserve 10 ; DevCPU
	;reserve 10 ; 0x10c DevKit

:_shell
	SET C, hwenum_targets
 	SET Y, 3
	JSR _hwenum

	SET A, 0
    SET B, 1          ; 60 ticks per second
    HWI [clock_id]

    SET A, 2
    SET B, 0x1337     ; interrupts with message 1337 mean switch slice
    HWI [clock_id]
    
    SET A, 3
    SET B, 2          ; interrupts with message 2 mean key event
    HWI [keyboard_id]
    
	SET A, 0
	SET B, 0x8000     ; map screen to 8000
	HWI [lem1802_id]
    
    IAS _shell_interrupt
    
    ;scr_packed_stringf( _shell_banner, 0x8000, 0x8a00 )
    SET I, 0x8000
	SET J, _shell_banner
	SET B, 0xa000
	JSR _scr_packed_string
	
    ;scr_packed_string( _shell_welcome, 0x8020 )
    SET I, 0x8020
	SET J, _shell_welcome
	SET B, 0xf000
	JSR _scr_packed_string
	
    SET [0x8040], 0xc0be
    
    SET X, 0
    SET Y, 0x8040
    
:_shell_loop
    SET PC, _shell_loop

:_shell_interrupt
	IFN A, 2
		RFI 0
	
	SET A, 1
	HWI [keyboard_id]
	IFE C, 0
		RFI 0
	
	IFL C, 0x20
		SET PC, _shell_nonascii
	IFG C, 0x80
		SET PC, _shell_nonascii
		
	IFE X, 30
		RFI 0
	SET [_shell_command+X], C
	ADD X, 1
	SET Z, X
	ADD Z, Y
	BOR C, 0xf000
	SET [Z], C
	SET [Z+1], 0x8088
	RFI 0
	
:_shell_nonascii
	IFE C, 0x11
		SET PC, _shell_return
	IFE C, 0x10
		SET PC, _shell_backspace
	RFI 0
	
:_shell_return
	IFG Y, 0x8120
		JSR _shell_scroll

	SET [_shell_command+X], 0
	
	SET C, 0
:_shell_cmd_loop
	;strcmp( _shell_command, _shell_commands )
	SET I, _shell_command
	SET J, _shell_commands
	ADD J, C
	IFG J, _shell_commands_end
		SET PC, _shell_unknown_cmd
	JSR _strcmp
	
	IFN A, 1
		SET PC, _shell_cmd_loop_back
	ADD C, B
	ADD C, 1
	SET J, _shell_commands
	ADD J, C
	SET [Y],  0x203e ; green old prompt
	
	
	SET PUSH, I
	IAG I
	SET PUSH, I
	SET PUSH, A
	SET PUSH, B
	SET PUSH, C
	SET PUSH, X
	SET PUSH, Y
	SET PUSH, Z
	SET PUSH, J
	SET PUSH, SP
	
	JSR [J] ; execute command
	
	SET SP, POP
	SET J, POP
	SET Z, POP
	SET Y, POP
	SET X, POP
	SET C, POP
	SET B, POP
	SET A, POP
	SET I, POP
	IAS I
	SET I, POP
	
	SET Z, X
	ADD Z, Y
	SET [Z+1], 0
	ADD Y, 0x20
	SET [Y], 0xc0be   ; new prompt
	SET [Y+1], 0x8088 ; cursor
	SET X, 0
	
	RFI 0
	
:_shell_cmd_loop_back
	ADD C, B
	ADD C, 2
	SET PC, _shell_cmd_loop
	
:_shell_return_reentry
	SET [_shell_command], 0
	RFI 0
	
:_shell_backspace
	IFL X, 1
		RFI 0
	SET Z, X
	ADD Z, Y
	SET [Z], 0x8088 ; cursor
	SET [Z+1], 0    ; clear old cursor
	SUB X, 1
	SET [_shell_command+X], 0
	RFI 0

:_shell_unknown_cmd
	SET [Y],  0x403e ; set old prompt to non blinking dark red
	SET Z, X
	ADD Z, Y
	SET [Z+1], 0
	ADD Y, 0x20
	SET X, 0
	
	;scr_packed_stringf( _shell_cmd_not_found, 0x8020, 0x4000 )
    SET I, Y
	SET J, _shell_cmd_not_found
	SET B, 0x4000
	JSR _scr_packed_string
	
	ADD Y, 0x20
	SET [Y], 0xc0be   ; new prompt
	SET [Y+1], 0x8088 ; cursor
	SET PC, _shell_return_reentry

:_shell_scroll
	SUB Y, 0x40
	SET PUSH, Y
	
	SET I, 0x8000
	SET J, 0x8040
	SET Y, 0x8190
	JSR _memcpy
	SET Y, POP
	SET PC, POP


:test1
	SET [0x80fa], 0x5133
	SET PC, POP
	
:test2
	;memset( 0x8000, 0x80, 0xbd45 )
	SET A, 0x8000
	SET B, 0x8180
	SET C, 0xbf41
	JSR _memset
	SET PC, POP

:_shell_command
	.reserve 32  ; DevCPU syntax
	;reserve 10  ; 0x10c DevKit syntax
	
:_shell_commands
	dat "test", 0, test1
	dat "toast", 0, test2
	dat "editor", 0, _editor
:_shell_commands_end

:_shell_banner dat 0x5330, 0x6c6c, 0x6c4f, 0x5320, 0x312e, 0x3000 ; "S0lllOS 1.0", 0
:_shell_welcome	dat 0x5765, 0x6c63, 0x6f6d, 0x6520, 0x6261, 0x636b, 0x2100 ; "Welcome back!", 0
:_shell_cmd_not_found dat 0x756e, 0x6b6e, 0x6f77, 0x6e20, 0x636f, 0x6d6d, 0x616e, 0x6400 ; "unknown command", 0

; hardware enumeration
:setup_keyboard
	SET [keyboard_id], I   ; I holds the hardware ID, alternatively check hwenum_targets + 3
	SET PC, POP            ; Identified handlers need to pop PC

:setup_clock
	SET [clock_id], I
	SET PC, POP
            
:setup_lem1802
	SET [lem1802_id], I
:setup_unknown
	SET PC, POP


:keyboard_id DAT 0xffff
:clock_id    DAT 0xffff
:clock_idd   DAT 0xffff
:lem1802_id  DAT 0xffff

:hwenum_targets
	DAT setup_unknown                           ; Start with one word address to the unknown setup routine
	DAT 0x30cf, 0x7406, 0xffff, setup_keyboard  ; one hardware setup is 4 words long
	DAT 0x7349, 0xf615, 0xffff, setup_lem1802   ; Format: 4 higher ID bits, 4 lower ID bits, recognized
	DAT 0x12d0, 0xb402, 0xffff, setup_clock     ; hardware ID (default 0xffff), last address to hwhandler

.include commands/editor.dasm

.include lib/hwenum.dasm
.include lib/memutils.dasm
.include lib/screenutils.dasm
.include lib/multitask.dasm

:end