; *************************
; Project: S0lllOS
; File: boot.dasm
; *************************

:_main
	IAS _interrupt_handler
	
	; enumerate hardware
	; set cycle_slice interrupt (0xffff) on clock
	
	; launch first task
	SET A, 0x16 ; process info = 16 words
	SET B, 0xffff ; proc id
	JSR _mem_alloc_memory
	IFE A, 0 ; failed to allocate memory
		SET PC, .error
	SET [_tasking_num_tasks], 1
	SET [_tasking_current_pid], 0xffff
	SET [_tasking_current_task], A
	
	; set the registers, assume everything else is zero
	SET [A], 0xffff ; pid
	SET [A+1], A    ; task list is cyclic
	SET [A+0xa], _empty_task  ; PC = ???
	SET [A+0xe], 1  ; OS flag
	
	SET X, A ; backup the task info
	
	SET A, 0x40 ; 64 words of stack is enough... hopefully
	SET B, 0xffff
	JSR _mem_alloc_memory
	IFE A, 0 ; failed to allocate memory
		SET PC, .error
	ADD A, 0x3f ; go to the end of the stack memory
	SET [X+0xb], A ; set SP
	
	SET A, X
	SET PC, _tasking_load_only ; jump straight to the loading
		
:.error
	SUB PC, 1

dat "EMPTY"
:_empty_task
	SUB PC, 1

.include 'tasking.dasm'
.include 'handler.dasm'
;.include lib/hwenum.dasm
;.include lib/memutils.dasm
;.include lib/screenutils.dasm