; *************************
; Project: S0lllOS
; File: boot.dasm
; *************************

:_main
	IAS _interrupt_handler
	IAQ 1 ; turn on interrupt queueing so our setup doesn't get disrupted
	; _tasking_next_slice will disable it again later on, so we don't need to care about that
	
	HWN Z ; enumerate hardware
:.hardware_loop
	SUB Z, 1
	HWQ Z
	IFE A, 0xb402
		IFE B, 0x12d0
			SET PC, .hardware_clock
	IFE Z, 0
		SET PC, .hardware_done
	SET PC, .hardware_loop
:.hardware_clock
	SET A, 2
	SET B, 0xffff
	HWI Z ; set cycle_slice interrupt (0xffff) on clock
	
	SET A, 0
	SET B, 1
	HWI Z ; set clock rate to 60Hz (maximum)  Do it this late to prevent task switces before we are done here
:.hardware_done
	; launch first task
	SET A, 0x10 ; process info = 16 words
	SET B, 0xffff ; proc id
	JSR _mem_alloc_memory
	IFE A, 0 ; failed to allocate memory
		SET PC, .error
	SET [_tasking_num_tasks], 1
	SET [_tasking_current_pid], 0xffff
	SET [_tasking_current_task], A
	
	; set the registers, assume everything else is zero
	SET [A], 0xffff ; pid
	SET [A+1], A ; task list is cyclic
	SET [A+0xa], _floppy_load_task  ; PC = ???
	SET [A+0xe], 1  ; OS flag
	
	SET X, A ; backup the task info
	
	SET A, 0x40 ; 64 words of stack is enough... hopefully
	SET B, 0xffff
	JSR _mem_alloc_memory
	IFE A, 0 ; failed to allocate memory
		SET PC, .error
	ADD A, 0x3f ; go to the end of the stack memory
	SET [X+0xb], A ; set SP
	
	SET A, X
	SET PC, _tasking_load_only ; jump straight to the loading

:.error
	SUB PC, 1

:_floppy_load_task ; make sure 0 is a lem1802 and 2 are floppy drive. assemble utils/appload_test.dasm for a demo
	SET A, 0x183
	INT [mem_alloc]
	
	SET X, A
	
	SET A, 0 ; map screen
	SET B, X ; to X
	HWI 0
	
	JSR .wait_floppy
	
	SET A, 0x200 ; floppy sector size
	INT [mem_alloc]
	
	SET Y, A ; to memory at a
	SET A, 2 ; read
	SET X, 0 ; from sector 0
	HWI 2 ; go!
	
	JSR .wait_floppy
	; now make this a new task
	SET A, Y
	SET B, [A] ; first word is size of code
	ADD A, 1 ; so the code starts at A+1
	INT [proc_exec]
	
	SUB PC, 1

:.wait_floppy
	SET A, 0
	HWI 2 ; poll floppy
	IFN B, 0x1 ; STATE_READY
		SET PC, .wait_floppy
	SET PC, POP

#include 'api.dasm'
#include 'handler.dasm'