; *************************
; Project: S0lllOS
; File: memutils.dasm
; Author:  S0lll0s
; *************************

:x_memcpy
	SET PUSH, X
	SET PUSH, Z
	SET X, 0
	SET Z, Y
	SUB Y, 4
:x_memcpy_loop
	IFG X, Y
		SET PC, x_memcpy_after
	STI I, J
	STI I, J
	STI I, J
	STI I, J
	ADD X, 4
	SET PC, x_memcpy_loop
:x_memcpy_after
	IFG X, Z
		SET PC, x_memcpy_end
	STI [I], [J]
	SET PC, x_memcpy_after
:x_memcpy_end
	SET Z, POP
	SET X, POP
	SET PC, POP
	
:_memcpy
	IFG I, Y
		SET PC, POP
	STI [I], [J]
	SET PC, _memcpy
	
;#macro memcpy( source, dest, length ) {
;	SET PUSH, Y
;	SET PUSH, I
;	SET PUSH, J
;	SET I, source
;	SET J, dest
;	SET Y, length
;	SET Z, length
;	JSR _memcpy
;	SET J, POP
;	SET I, POP
;	SET Y, POP
;}

:_memset
	ADD Y, X
:_memset_loop
	IFG X, Y
		SET PC, _memset_after
	SET [X],   Z
	SET [X+1], Z
	SET [X+2], Z
	SET [X+3], Z
	ADD X, 4
	SET PC, _memset_loop
:_memset_after
	IFG X, Y
		SET PC, _memset_end
	SET [X], Z
	ADD X, 1
	SET PC, _memset_after
:_memset_end
	SET Z, POP
	SET X, POP
	SET PC, POP

;#macro memset( loc, len, val ) {
;	SET PUSH, X
;	SET PUSH, Y
;	SET PUSH, Z
;	SET X, loc
;	SET Y, len
;	SET Z, val
;	JSR _memset
;	SET Z, POP
;	SET X, POP
;	SET Y, POP
;}

:_strcmp
	SET B, 0
:_strcmp_loop
	IFE [I], 0
		IFE [J], 0
			SET PC, _strcmp_success
	IFN [I], [J]
		SET PC, _strcmp_failure
	ADD I, 1
	ADD J, 1
	ADD B, 1
	SET PC, _strcmp_loop
:_strcmp_failure
	SET A, 0
	SET PC, POP
:_strcmp_success
	SET A, 1
	SET PC, POP
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; strcmp ( String a, String b )
; compares two strings. returns A = 1 on success, 0 on failure
; B is the position of failure / length of the string
;#macro strcmp( stra, strb ) {
;	SET PUSH, J
;	SET PUSH, I
;	SET I, stra
;	SET J, strb
;	JSR _strcmp
;	SET I, POP
;	SET J, POP
;}